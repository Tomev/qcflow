% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-serve.R
\name{qcflow_rfunc_serve}
\alias{qcflow_rfunc_serve}
\title{Serve an RFunc QCFlow Model}
\usage{
qcflow_rfunc_serve(
  model_uri,
  host = "127.0.0.1",
  port = 8090,
  daemonized = FALSE,
  browse = !daemonized,
  ...
)
}
\arguments{
\item{model_uri}{The location, in URI format, of the QCFlow model.}

\item{host}{Address to use to serve model, as a string.}

\item{port}{Port to use to serve model, as numeric.}

\item{daemonized}{Makes `httpuv` server daemonized so R interactive sessions
are not blocked to handle requests. To terminate a daemonized server, call
`httpuv::stopDaemonizedServer()` with the handle returned from this call.}

\item{browse}{Launch browser with serving landing page?}

\item{...}{Optional arguments passed to `qcflow_predict()`.}
}
\description{
Serves an RFunc QCFlow model as a local REST API server. This interface provides similar
functionality to ``qcflow models serve`` cli command, however, it can only be used to deploy
models that include RFunc flavor. The deployed server supports standard qcflow models interface
with /ping and /invocation endpoints. In addition, R function models also support deprecated
/predict endpoint for generating predictions. The /predict endpoint will be removed in a future
version of qcflow.
}
\details{
The URI scheme must be supported by QCFlow - i.e. there has to be an QCFlow artifact
         repository corresponding to the scheme of the URI. The content is expected to point to a
         directory containing MLmodel. The following are examples of valid model uris:

                 - ``file:///absolute/path/to/local/model``
                 - ``file:relative/path/to/local/model``
                 - ``s3://my_bucket/path/to/model``
                 - ``runs:/<qcflow_run_id>/run-relative/path/to/model``
                 - ``models:/<model_name>/<model_version>``
                 - ``models:/<model_name>/<stage>``

 For more information about supported URI schemes, see the Artifacts Documentation at
 https://www.qcflow.org/docs/latest/tracking.html#artifact-stores.
}
\examples{
\dontrun{
library(qcflow)

# save simple model with constant prediction
qcflow_save_model(function(df) 1, "qcflow_constant")

# serve an existing model over a web interface
qcflow_rfunc_serve("qcflow_constant")

# request prediction from server
httr::POST("http://127.0.0.1:8090/predict/")
}
}
